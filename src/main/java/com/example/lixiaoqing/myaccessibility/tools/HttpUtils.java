package com.example.lixiaoqing.myaccessibility.tools;import android.util.Log;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.security.SecureRandom;import java.security.cert.CertificateException;import java.security.cert.X509Certificate;import javax.net.ssl.HostnameVerifier;import javax.net.ssl.HttpsURLConnection;import javax.net.ssl.SSLContext;import javax.net.ssl.SSLSession;import javax.net.ssl.TrustManager;import javax.net.ssl.X509TrustManager;public class HttpUtils {	private static final String TAG = "http";	private static HttpURLConnection httpGetURLConnection = null;	private static HttpURLConnection httpPostURLConnection = null;	private static HttpURLConnection getHttpsConnectionSimple(String url , String type){		if (type == "GET"){			try {				if(url.startsWith("https")){					SSLContext sc = SSLContext.getInstance("TLS");					sc.init(null, new TrustManager[]{new MyTrustManager()}, new SecureRandom());					HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());					HttpsURLConnection.setDefaultHostnameVerifier(new MyHostnameVerifier());					httpGetURLConnection = (HttpsURLConnection)new URL(url).openConnection();				} else					httpGetURLConnection = (HttpURLConnection) new URL(url).openConnection();			} catch (Exception e){				e.printStackTrace();			}			return httpGetURLConnection;		} else {			try {				if(url.startsWith("https")){					SSLContext sc = SSLContext.getInstance("TLS");					sc.init(null, new TrustManager[]{new MyTrustManager()}, new SecureRandom());					HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());					HttpsURLConnection.setDefaultHostnameVerifier(new MyHostnameVerifier());					httpPostURLConnection = (HttpsURLConnection)new URL(url).openConnection();				} else					httpPostURLConnection = (HttpURLConnection) new URL(url).openConnection();			} catch (Exception e){				e.printStackTrace();			}			return httpPostURLConnection;		}	}	// unsafe https use	private static class MyTrustManager implements X509TrustManager {		@Override		public void checkClientTrusted(X509Certificate[] chain, String authType)				throws CertificateException {		}		@Override		public void checkServerTrusted(X509Certificate[] chain, String authType)				throws CertificateException {		}		@Override		public X509Certificate[] getAcceptedIssuers() {			return null;		}	}	// unsafe https use	private static class MyHostnameVerifier implements HostnameVerifier {		@Override		public boolean verify(String hostname, SSLSession session) {			return true;		}	}	public String doPost(String httpUrl, String parameter){//		Log.d(TAG, "doPost("+httpUrl+"   ,   "+parameter+")");		HttpURLConnection httpURLConnection = getHttpsConnectionSimple(httpUrl, "POST");		if (null == httpURLConnection)			return null;		httpURLConnection.setDoInput(true);		httpURLConnection.setDoOutput(true);		httpURLConnection.setUseCaches(false);		httpURLConnection.setRequestProperty("Charset", "UTF-8");		httpURLConnection.setConnectTimeout(10000);		InputStream inputStream = null;		OutputStream outputStream;		try {			httpURLConnection.setRequestMethod("POST");			outputStream = httpURLConnection.getOutputStream();			outputStream.write(parameter.getBytes("UTF-8"));			outputStream.flush();			outputStream.close();			inputStream = httpURLConnection.getInputStream();			BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));			StringBuilder stringBuilder = new StringBuilder();			String line;			while((line = bufferedReader.readLine()) != null){//使用while循环来取得获取的数据				stringBuilder.append(line).append("\n");//我们要在每一行的后面加上一个反斜杠来换行			}			int httpResponseCode = httpURLConnection.getResponseCode();			Log.d(TAG, "httpURLConnection Response : " + httpResponseCode +" - " + stringBuilder.toString().trim());			if (httpResponseCode == HttpURLConnection.HTTP_OK ){				return stringBuilder.toString().trim();			}		} catch (Exception e) {			e.printStackTrace();		} finally {			if (null != inputStream)				try {					inputStream.close();				} catch (IOException ignored) {}				httpURLConnection.disconnect();		}		return null;	}	private String doGet(String httpUrl){		HttpURLConnection httpURLConnection = getHttpsConnectionSimple(httpUrl, "GET");		if (null == httpURLConnection)			return null;		httpURLConnection.setDoInput(false);		httpURLConnection.setDoOutput(false);		httpURLConnection.setUseCaches(false);		httpURLConnection.setRequestProperty("Charset", "UTF-8");		httpURLConnection.setConnectTimeout(10000);		InputStream inputStream = null;		try {			Log.d(TAG, "GET");			httpURLConnection.setRequestMethod("GET");			Log.d(TAG, "GET");			int httpResponseCode = httpURLConnection.getResponseCode();			Log.d(TAG, "get success" + httpResponseCode);			if (httpResponseCode == HttpURLConnection.HTTP_OK ){//				responseMsg = httpURLConnection.getResponseMessage();				return httpURLConnection.getResponseMessage();			}		} catch (Exception e) {			e.printStackTrace();		} finally {			httpURLConnection.disconnect();		}		return null;	}	public void httpPost(String httpUrl, String parameter) {		new Thread(new Runnable() {			String httpUrl = "";			String parameter = "";			Runnable setHttpUrl(String httpUrl, String parameter) {				this.httpUrl = httpUrl;				this.parameter = parameter;				return this;			}			public void run() {				String result = doPost(httpUrl, parameter);				if(null != result && "ok".equals(result)){					Log.d(TAG, " httpPost success " + result + " - " + httpUrl + parameter.subSequence(0, parameter.length()>40 ? 40 : parameter.length()));				} else {					Log.d(TAG, " httpPost false " + " - " +  httpUrl + parameter.substring(0,parameter.length()>40 ? 40 : parameter.length()));				}			}		}.setHttpUrl(httpUrl, parameter)).start();	}	public void httpGet(String httpUrl) {		new Thread(new Runnable() {			String httpUrl = "";			String parameter = "";			Runnable setHttpUrl(String httpUrl) {				this.httpUrl = httpUrl;				return this;			}			public void run() {				String result = doGet(httpUrl);				if(null != result){					Log.d(TAG, " httpGet success " + result + " - " + httpUrl + parameter.subSequence(0, parameter.length()>40 ? 40 : parameter.length()));				} else {					Log.d(TAG, " httpGet false " + " - " +  httpUrl + parameter.substring(0,parameter.length()>40 ? 40 : parameter.length()));				}			}		}.setHttpUrl(httpUrl)).start();	}}